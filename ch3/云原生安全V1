---
authors: ["朱松、aifeila"]
company: ["阿里云、Daocloud"]
reviewers: ["刘如明"]
---

根据Gartner研究预测，到2022年超过75％的全球企业将在生产环境中运行容器化应用。虽然以容器为核心的云原生技术发展速度空前增长，企业采用新兴技术的同时，也需要确保应用在全生命周期的各个关键环节尤其在生产环境运行时的安全问题。云原生技术作为企业数字业务应用创新的原动力，不仅被引入到云原生应用全生命周期管理中，而且被推到了生产环境。云原生技术为企业带来快速交付与迭代数字业务应用的优势之外，同时也带来了新的安全要求与挑战。
传统的边界安全模型在动态变化的云原生环境难适用。云原生环境中应用微服务化大幅增加了内部网络流量和服务通信端口总量，同时承载负载的容器秒级启动或消失的动态变化，增加了安全监控和保护的难度，传统防火墙基于固定IP的安全策略很难适应这种持续的动态变化，无法准确捕捉容器间的网络流量和异常行为。
容器共享操作系统的进程级隔离环境增加逃逸风险。传统软件架构下，应用之间通过物理机或虚拟机进行隔离，从安全角度来看可以将安全事件的影响限制在有限可控的范围内。在云原生环境下，多个服务实例共享操作系统，一个存在漏洞服务被攻陷可能会导致运行在同主机上其他服务受到影响，逃逸风险大大提高。
频繁变更对软件流转的全链条安全提出新要求。为提高数字业务应用交付与运维效率，企业应用开发与运维部门引入开发运营一体化流程。每个微服务应用会涉及相对独立的开发、测试和部署的全生命周期，并通过持续集成/持续交付的流水线，将应用部署运行在开发测试和生产环境中。在整个业务应用全生命周期中，需要为各个环节引入自动化安全保护，不仅避免各个环节的潜在风险，而且提高应用安全交付效率。
应用微服务化大幅增加攻击面。容器技术保证了运行环境的强一致性，为应用服务的拆分解耦提供了前提，应用微服务化进程加速，同时也带来新的安全隐患。单体应用拆分导致端口数量暴增，攻击面大幅增加。微服务将单体架构的传统应用拆分成众多个服务，应用间交互的端口成指数级增长，相较于单体应用架构集中在一道口防护的简单易行，微服务化应用在端口防护、访问权限、授权机制等方面的难度陡增。
针对上述云原生技术架构下的安全风险 ，云原生产业联盟CNIA联合业内技术专家共同提出云原生技术安全架构模型，用于建设服务之间零信任、具备统一的安全管理策略、软件流转可溯源的云原生安全体系，保证企业的研发运营环境安全。

![云原生技术安全架构图](https://ae01.alicdn.com/kf/H03eb29413a14414f8f669c35825e3855v.jpg)

**可信计算**

可信计算（Confidential computing）的目标是保护数据使用中（In-Use）的安全性和机密性。目前数据的加密和保护技术主要是针对静态存储数据和网络传输数据，这些技术比较成熟；然而如何加密使用(In-Use)中的数据是整个机密数据保护周期中最具挑战的一步。可信计算把加密的数据和代码放在一个特殊的执行上下文环境(TEE, Trusted Execution Environment)中，而不会暴露给系统其他部分，任何其他应用、BIOS、OS Kernel、管理员、运维人员、云厂商、甚至除了CPU以外的其他硬件均无法访问，极大减少敏感数据的泄露，为用户提供了更好的控制、透明度和隐秘性。
可信计算核心功能包括：
1.保护并验证云端代码和数据的完整性；
2.避免敏代码和数据在使用过程中不被恶意窥探和窃取；
3.保证用户对数据全生命周期的控制。

**容器安全**

1)	基础架构安全
基础架构安全作为整个云原生安全框架的基石，需要充分利用其云平台底座的平台安全能力，保证平台具备如下安全特性：
* 平台安全合规性；
* 基于VPC和安全组的网络隔离能力；
*	完备的云安全服务能力，包括云客户安全和云厂商安全在IaaS层的软件/硬件/物理数据中心等的安全（包括主机安全防护、云数据全链路加密能力、资源访问控制能力和审计能力等）；
2)	容器化软件供应链安全
容器化软件交付是现代软件供应链的最佳实践，可以加速DevOps理念沉淀落地。可以利用持续集成/持续交付流水线，将代码构建为Docker镜像，进行端到端测试、预发验证和生产部署。其中的枢纽是作为软件资产仓库的镜像仓库。保障容器化 软件供应链的安全，才能规避潜在安全风险部署上线，并且一旦发现风险，能够可靠评估其影响面，并及时可靠地对其进行修复。可信软件供应链将帮助企业从DevOps进化到DevSecOps，在提升研发效率的同时控制系统安全风险。
如下几个安全特性是可信软件供应链层需要具备的：
*	基于CVE的容器镜像扫描和高风险阻断部署能力；
*	基于自定义ACL规则的镜像仓库网络访问控制；
*	镜像签名和验签能力；
*	应用交付全链路可观测，可追踪，可自主设置。

3)	运行时安全

监控、异常活动检测、隔离是容器应用运行时刻安全防护的关键要素。在运行时刻我们需要保障线上系统可以动态感知系统安全风险，并及时做出响应。这里涉及到容器架构自身的安全性，如容器安全与资源隔离，Kubernetes集群安全性，网络策略支持等底层能力。同时需要对容器运行时行为监测，对异常操作、攻击等问题及时告警、阻断；另外在应用测，也需要业务需求考虑如何与容器提供的分布式安全能力有机地结合在一起，比如实现多租户场景下的安全隔离。如下特性是运行时刻需要具备的几个关键安全能力：
*	容器运行时刻安全防护能力，包括进程异常行为检测、网站后门、文件查杀、恶意脚本攻击和异常网络连接检测等能力；
*	安全沙箱容器，基于轻量化虚拟技术实现容器内核粒度的强隔离；
*	集群支持基于网络策略的应用间东西向流量的细粒度访问控制；
*	在多租场景下，开启Kubernetes集群默认安全配置，通过PSP等原生安全特性限制容器运行时刻的安全风险。对于隔离程度要求较高的场景，支持使用安全沙箱容器和动态策略引擎等强隔离手段保证多租安全。

**基于服务网格的安全**
在微服务的体系架构下，开发人员基于不同的服务框架和开发语言实现自身服务。如何保证整个服务网格的系统安全，以Istio为代表的服务网格产品提出了如下的安全目标：
默认安全： 应用程序代码和基础结构无需更改
深度防御： 与现有安全系统集成，提供多层防御
零信任网络： 在不受信任的网络上构建安全解决方案
为此服务网格需要在下列方向上提供相应的安全措施以保证网格内微服务的安全性：
认证：基于统一规范的认证身份，确保服务之间的所有网络流量都是经过安全认证的，在服务应用程序和网关侧提供如JWT，TLS双向认证等多种认证形式。支持可配置的认证策略。
鉴权：支持服务与服务间和最终用户到服务间的强制授权检验已确保网格中服务的使用者遵循了权限最小化原则。提供网格维度，命名空间维度和应用负载维度上的基于自定义策略的细粒度授权配置。
零信任网络：遵循零信任原则，通过mTLS，RBAC和自动证书轮转等必要安全措施构建一个零信任网络。
