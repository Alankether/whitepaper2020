{"./":{"url":"./","title":"简介","keywords":"","body":"云原生发展白皮书 2020 本白皮书由云原生产业联盟技术专家负责编写和维护。 组织方式 该白皮书基于 Markdown 的方式编写，采用 GitHub 进行统一的版本管理和变更管理。 本书使用 Gitbook 组织，查看本书大纲。 协作流程 参与编写和 review 请参考如下的协作流程。 如何下载 git clone git@github.com:CloudNativeIndustryAlliance/whitepaper2020.git 如何贡献 Fork 仓库或在本地创建分支 以二级目录为基本文档单元选择编写任务 使用 Markdown 格式说明 格式进行文档编辑 编辑完成后提交到 GitHub 发起 Pull Request，申请合并 专家 Review 提交内容后确认是否接受 Pull Request 编辑工具 MarkDown 编辑器：Typora MarkDown 编辑器 & Git 管理：VScode Git 管理工具：GitHub Desktop Git 工具: Git 调查问卷 请访问云原生用户调查报告。 编写专家 参与各章节编写的专家可更新此表。 章节 公司 姓名 Github 账号 Service Mesh 蚂蚁金服 宋净超 rootsongjc 声明： 本文稿所有权与使用权归中国信息通信研究院所有，具有保密性，未经授权，个人或组织不得以任何形式转载、公开和使用。 Disclaimer: The ownership and copyright of this document belong to the China Academy of Information and Communications Technology, and this document is confidential. Without authorization, individuals or organizations may not reproduce, disclose, or use this document in any forms. 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch1/new-chanllenge.html":{"url":"ch1/new-chanllenge.html","title":"1. 新机遇","keywords":"","body":"（一）疫情倒逼企业数字化转型提速换挡，“新基建”开启云原生新的篇章 疫情加速开启中国的数字新基建新时代。2020年的新冠疫情已经给中国经济发展带来较大冲击，经济下行压力增大，然而数字经济展现出强大的抗压能力，极大程度上对冲了疫情影响。后疫情时代随着企业全面复工复产的稳步推进，“上云用数赋智”已经成为企业共识，企业上云进入攻坚期，数字化转型进程显著提速。同时为提振国内经济，舒缓疫情压力，中央加紧规划部署“新基建”相关工作，高频发布相关政策，截止3月6日各省公布的2020年重点项目投资计划约40万亿元，其中“新基建”成重点方向。空前的市场需求刺激和政策利好引爆数字技术的资本市场，以云计算为核心的新一代数字技术迎来新的发展机遇。 新时代下企业对云计算的需求从资源优化转向效能提升。数字化转型大潮下的企业面临着新旧商业形态的剧变，颠覆和重构时刻都在发生。更加快速的感知用户侧的需求变化并做出调整，才能在竞争中持续积累优势。业务的敏捷、弹性、个性化和智能化需求凸显，应用的交付模式也发生深刻变化，轻量化、松耦合、灵活弹性的敏捷技术架构成为主要方向。将支撑业务应用的通用技术模块化、系统化逐渐下沉至云平台，低心智负担且功能丰富的应用支撑能力成为云的突出需求，云计算服务重心逐渐上移。 云原生成为下一代云计算的技术“内核”大幅提升用云效能。云原生技术栈统一的标准化交付能力大幅提升云端效能。服务架构标准统一，应用微服务化开发，服务之间使用标准的API接口进行通信。松耦合架构会减轻因需求变更导致的系统迭代成本，为多团队并行开发提供基础，并加快交付速度；交付标准统一，标准容器化的打包方式实现了真正的应用可移植性，不在受限于特定的基础架构环境。并且容器技术进程级的资源切分粒度，也会降低系统的资源开销；研运过程标准统一，通过引入DevOps理念强化软件研发运营全周期的管理，从软件需求到生产运维的全流程改进和优化，结合统一工具链，实现文化、流程、工具的一致性，降低应用软件高频发布带来的风险，提升软件产品质量。 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch1/trend.html":{"url":"ch1/trend.html","title":"2. 新机遇下的云原生发展态势","keywords":"","body":"新机遇下的云原生发展态势 TODO 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch1/cloud-native-definition.html":{"url":"ch1/cloud-native-definition.html","title":"3. 云原生概念重定义","keywords":"","body":"云原生概念重定义 1、 从产业来看： 云计算的拐点已至，云原生将成为驱动业务增长的重要引擎。云计算的发展已经迈入成熟期，作为新型基础设施支撑数字化转型的重任，基于云计算模式的应用架构进行本土业务系统开发，即云原生将成为驱动未来数字基础设施的强大引擎。云原生是云计算发展的必然阶段，云计算未来的黄金十年，下一代云计算。 从资源上云到业务上云，最终走向云原生时代的全面上云。企业上云的初期阶段是把现有IT系统搬迁到云上，更多在虚拟化层面的改造工作，随着云计算生态的蓬勃发展，原有的应用架构陈旧，在扩展性、适配性、弹性伸缩、资源调度、开发运维等方面与云计算架构的优势不匹配，无法真正发挥云的价值。云原生技术通过标准化资源，轻量化弹性调度等特征，应用场景较为广泛，随着技术和生态不断成熟和完善，有效缓解企业上云顾虑，拉动全行业的上云程度。 2、 从技术来看： CNCF定义： 云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。 新定义： 云原生技术能够帮助用户在云上环境中构建灵活可扩展的高可靠应用服务，这些服务具备大规模可复制性、可随意处置性以及较强自愈性等特征。借助云原生技术，用户可构建低心智负担、容错性好的弱运维系统，降低频繁发布和重大变更的风险。 3、 从应用效应看： 标准化：初期的云计算时代资源池化，统一了硬件（硬件标准化）；但标准化程度并不高，而到了云原生时代，标准化程度更高（资源标准化），为服务化、自动化提供了基础； 降低成本：降低用户使用门槛，提高资源利用率; 打通研发与运维流程：云原生有效衔接研发与运维流程，打破了组织壁垒，实现了跨域协同，变革了研发运营的生产方式，提升了交付效率； 服务自治，故障自愈：分布式具备高可用性，及健壮的自愈能力; 核心价值：生于云，用于云，释放云的红利； 业务创新：云原生赋能新兴领域，支撑新基建的快速发展，助力企业解放生产力。 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch2/scale-analysis.html":{"url":"ch2/scale-analysis.html","title":"（一）1. 云原生产业规模分析","keywords":"","body":"云原生产业规模分析 产业数据测算方法 TODO 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch2/云原生产业生态-生态概述.html":{"url":"ch2/云原生产业生态-生态概述.html","title":"生态概述","keywords":"","body":"生态概述 TODO 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch2/云原生产业生态-最终用户.html":{"url":"ch2/云原生产业生态-最终用户.html","title":"最终用户","keywords":"","body":"最终用户 最终用户推动产业发展的原生需求 最终用户在生态中的作用、行业分布等 TODO 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch2/云原生产业生态-生态伙伴.html":{"url":"ch2/云原生产业生态-生态伙伴.html","title":"生态伙伴","keywords":"","body":"生态伙伴 生态伙伴是联接产业供需的粘合剂 生态伙伴在生态中的作用、聚合分类及典型代表等 TODO 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch2/云原生产业生态-技术生态.html":{"url":"ch2/云原生产业生态-技术生态.html","title":"技术生态","keywords":"","body":"技术生态 解决产业需求的技术驱动 1) 云原生技术生态初具规模，分支项目不断涌现 2) 开源主导技术生态，本土力量日益凸显 TODO 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/关键技术-kubernetes.html":{"url":"ch3/关键技术-kubernetes.html","title":"Kubernetes","keywords":"","body":"Kubernetes TODO 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/关键技术-devops.html":{"url":"ch3/关键技术-devops.html","title":"DevOps","keywords":"","body":"DevOps TODO 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/新技术-云原生存储.html":{"url":"ch3/新技术-云原生存储.html","title":"云原生存储","keywords":"","body":"云原生存储 对象存储服务（OSS）是云原生基础设施服务之一，基于分布式平台构建对象访问协议, 以 HTTP RESTful API 的形式对外提供海量、安全、低成本、高可靠的云存储服务，也是Serverless最具代表性的BaaS产品，适合存放任意类型的文件。容量和处理能力弹性扩展，多种存储类型供选择，全面覆盖从热到冷的各种数据，优化存储成本。其数据可靠性不低于 99.9999999999%（12 个 9），服务可用性不低于 99.995%。 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/新技术-云原生网络.html":{"url":"ch3/新技术-云原生网络.html","title":"云原生网络","keywords":"","body":"云原生网络 云原生网络的基本目标是满足云原生服务的网络端点（容器）和服务间的互通性、安全性和负载均衡要求。Kubernetes已经成为容器编排的事实标准，容器网络也需与Kubernetes的调度机制相匹配。容器网络接口CNI(Conteinre Network Interface)是现行的网络接口标准， CNI接口只实现创建、删除容器时的调用方法，其他所有的网络能力都交给网络厂商去增值。这在一定程度上加速了网络方案的繁荣，但是给用户的方案选型造成了较大困扰。大部分的用户场景都是基于网络的通讯协议进行方案选择，根据网络协议的不同，可将网络方案分为路由模式、Overlay和L2方案三种。 null 路由模式 Overlay模式 L2模式 优势 网络性能高支持Kubernetes原生负载均衡和网络策略机制*符合传统网络的监管要求 物理网络无侵入支持Kubernetes原生负载均衡和网络策略机制 网络性能高可直接用于IaaS层网络通信，易于迁移*符合传统的监管需求 缺点 *大规模应用场景需要交换机与BGP打通 存在封装影响性能排查问题难，需引入额外排查工具*无法与传统的网络监管模式兼容 网络管理依赖于物理网络大部分方案无法复用Kubernetes的网络优势 可选方案 Calico BGPFlannel Host GatewayKube-routerContiv BGP Calico IPIP,VXLANFlannel VXLAN, UDPWEAVECanal*SDN方案 Lunix BridgeMacvlanSRIOVOVS BridgeContiv VlanOvn-kubernetes 自CNI标准发布到2020年，云原生网络已经演进近6年时间。也积累了大量的用户落地案例和大规模的实践案例。未来对于云原生网络的演进，依旧会在用户落地场景方向上深度演进。总结起来主要是以下几个趋势： 互访场景需求加速容器网络与主机网络互通。 随着云原生的普及，服务端点（容器）的规模快速增长（十万甚至百万），互访场景越来越丰富，比如：跨集群、跨VPC、混合云互访等，这要求容器端点具有与宿主节点（虚机）相同的互通能力，容器成为VPC中的一等公民，容器（POD）和服务（ClusterIP）具有独立VPC的子网地址，甚至具有独立的直通网口（如：ENI）,这样在获得更高转发性能、更低损耗的同时，具有了更好的隔离性，通过在容器挂接的网口配置安全组规则，能够实现容器级别的微分段network policy。当然，这给vpc网络的支持的网口规模（10w+）和发放速度（秒级）提出了的挑战。另外，以GKE为代表的厂商，推出container-native的分布式负载均衡，将云原生业务的东西向负载均衡能力下沉到VPC网络中，消除了原来节点内iptables/ipvs占用的内存和计算开销，具有更好的资源效率，相信这也会成为未来的趋势。 云原生网络方案将聚焦解决特定场景的问题。 平台的安全问题在所有的平台演进和建设过程中一直扮演着非常重要，但是不十分紧急的角色。因此，在容器安全建设上，大部分组织都是采取防守和被动姿态。但是本身在近几年陆续爆出大量的基于容器平台的安全隐患以及在工信部和网信办联合组织的“护网行动”的大背景之下，容器安全已经成为云原生底座无法绕开的一个问题。 容器网络安全则在整个底座安全里面扮演了非常重要的角色，因此也将成为之后的CNI网络演进的方向和趋势。 网络安全将成为云原生技术底座的重要组成部分。 平台的安全问题在所有的平台演进和建设过程中一直扮演着非常重要，但是不十分紧急的角色。因此，在容器安全建设上，大部分组织都是采取防守和被动姿态。但是本身在近几年陆续爆出大量的基于容器平台的安全隐患以及在工信部和网信办联合组织的“护网行动”的大背景之下，容器安全已经成为云原生底座无法绕开的一个问题。 容器网络安全则在整个底座安全里面扮演了非常重要的角色，因此也将成为之后的CNI网络演进的方向和趋势。 SDN在大规模网络场景下的应用会越来越突出。 在底层网络SDN的趋势之下，容器网络管理作为未来用户第二个网络管理平面，其实更需要SDN的技术应用。SDN本身的两大特点： 1. 网络可编程 2. 数据平面和管理平台分离。首先，用户可以基于这两大特点来进行自己的网络管理平台的开发和编程，和传统的网络管理平面进行便利的兼容和对接。其次，SDN带来的丰富的网络管理功能和细粒度的网络管控，都可以支撑在大规模场景的网络精细化管理。 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/新技术-安全容器.html":{"url":"ch3/新技术-安全容器.html","title":"安全容器","keywords":"","body":"安全容器 TODO 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/新技术-边缘容器.html":{"url":"ch3/新技术-边缘容器.html","title":"边缘容器","keywords":"","body":"边缘容器 随着 5G 和万物互联时代的到来，传统云计算中心集中存储、计算的模式已经无法满足终端设备对于时效、容量、算力的需求，向边缘下沉并通过中心进行统一交付、运维、管控，已经成为云计算的重要发展趋势。以Kubernetes为基础的云原生技术，核心价值之一是通过统一的标准实现在任何基础设施上提供和云上一致的功能和体验，借助云原生技术，可以实现云-边-端一体化的应用分发，解决在海量边、端设备上统一完成大规模应用交付、运维、管控的诉求；在安全方面，云原生技术可以提供容器等更加安全的工作负载运行环境，以及流量控制、网络策略等能力，能够有效提升边缘服务和边缘数据的安全性；在边缘网络环境下，基于云原生技术的边缘容器能力，能保证弱网、断网的自治性，提供有效的自恢复能力，同时对复杂的网络接入环境有良好的兼容性；依托云原生领域强大的社区和厂商支持，云原生技术对异构资源的适用性逐步提升，在物联网领域，云原生技术已经能够很好的支持多种CPU架构(x86-64/arm/arm64)和通信协议，并实现较低的资源占用。所以，以 Kubernetes 为基础的云原生技术和边缘计算相结合，可以很好解决下沉过程中云边一体化协同、安全、边缘网络适配、异构资源适配等难题，极大加速云计算边缘化进程。 针对边缘设备及业务场景的特殊性，边缘应用对容器技术提出了如下要求： 资源协同: 边缘计算提供云-边-端的资源协同管理，在云端统一管理边-端的节点和设备。在资源协同的诉求中，需要考虑对节点、设备进行功能抽象，在云、边、端之间通过各种协议完成数据接入，在云端统一管理和运维。 应用/业务管理协同: 作为云原生应用编排部署事实标准的Kubernetes，在多年的发展中已经积累和沉淀了一些对云原生应用的编排部署模型。而KubeEdge通过边云协同的方式，将这些编排部署能力延伸到边侧，支持边缘侧日益复杂的业务和高可用性的要求。 智能协同: AI能力的发展可谓是近年来边缘计算持续火爆的一大主要推手。边云的智能协同也是目前边缘计算项目中一个非常重要的协同场景。 数据协同：服务之间的协同更像是要求更高的数据协同。因为它在数据的传输之外还增加了服务发现、灰度路由、熔断容错等更偏向业务层的能力。或者说服务协同本身就是建立在数据协同的基础之上的，两者在云原生的微服务架构中缺一不可。 轻量化：受限于边缘设备的资源，部署在边缘侧的容器平台不可能是完整的Kubernetes平台，必须对其进行精简，如KubeEdge项目，运行内存仅需70M。 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/新技术-事件驱动.html":{"url":"ch3/新技术-事件驱动.html","title":"事件驱动","keywords":"","body":"事件驱动 在云原生技术体系下，微服务架构是一种必然的趋势，一个微服务的架构是需要一个系统来支持服务和服务之间的通信，从而把微服务合理的组织在一起提供服务。自然，事件驱动的微服务架构就是一种非常好的选择。所以对于大多数应用，让微服务工作并且管理好分布式数据的方式就是采用事件驱动架构。 事件驱动架构是一种用于设计应用的软件架构和模型。对于事件驱动系统而言，事件的捕获、通信、处理和持久化保留是解决方案的核心。这与传统的请求驱动模型有很大的不同。 事情驱动是一种松耦合的架构，订阅者无需主动关注事件的产生，只要被动接受事件生产者产生的消息并进行处理，这种架构下，能够帮助提升系统的整体复用性、交互性和可扩展性。 事件驱动的架构促使了一个完全去中心化平台的发展，服务不必再同一个系统或是数据中心中，并且可以不属于同一个组织。 在事件驱动的体系结构中，当服务执行其他服务可能感兴趣的某些工作时，该服务将生成一个事件—执行操作的记录。其他服务使用这些事件，以便它们能够执行由于该事件而需要的任何自己的任务。事件成为了可以被消费的对象，而不仅仅是在函数间传递的临时参数，从而可以同时被多个服务消费。其它服务不需要直接和生成事件的服务进行交互，而可以通过监听事件，触发其对应的操作，从而降低了服务内部的复杂度。事件驱动架构提供了以下优点： 异步——基于事件的架构是异步的，没有阻塞。这使得资源可以在他们的工作单元完成后自由地转移到下一个任务，而不用担心之前发生了什么或者接下来会发生什么。它们还允许对事件进行排队或缓冲，从而防止使用者向生产者施加压力或阻塞它们。 松耦合——服务不需要(也不应该)知道或依赖于其他服务。在使用事件时，服务独立运行，不了解其他服务，包括其实现细节和传输协议。事件模型下的服务可以独立地、更容易地更新、测试和部署。 易于扩展——由于服务在事件驱动的体系结构下解耦，而且服务通常只执行一项任务，因此跟踪特定服务的瓶颈，并对该服务(且仅对该服务)进行扩展变得很容易。 恢复支持——带有队列的事件驱动架构可以通过“重播”过去的事件来恢复丢失的工作。当用户需要恢复时，这对于防止数据丢失非常有用 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/新技术-消息队列.html":{"url":"ch3/新技术-消息队列.html","title":"消息队列","keywords":"","body":"消息队列 消息服务作为应用的通信基础设施，是微服务架构应用的核心依赖，也是实践云原生的核心设计理念的关键技术，通过消息服务能够让用户很容易架构出分布式的、高性能的、弹性的、鲁棒的应用程序。消息服务在云原生的重要性也导致其极可能成为应用实践云原生的阻塞点，所以消息服务的云原生化是至关重要的。 云原生消息服务是云原声的通信基础设施，处于云原声全景图的应用定义和开发层，为微服务和EDA架构提供核心的解藕、异步和削峰的能力，同时在云原生其他层次领域，还发挥着数据通道、事件驱动以及集成与被集成等重要作用。 首先云原生消息服务是云原生的通信基础设施。2015年成立的CNCF基金会大范围推广了云原生的技术理念，并提供了一套完整的实践技术工具集，帮助开发者落地云原生理念。这套工具集收录于CNCF云原生全景图，其中消息中间件处于应用定义和开发层的Streaming和Messaging类目。 消息中间件在云原生的应用场景，主要是为微服务和EDA架构提供核心的解耦、异步和削峰的能力，在云原生全景图定义的其它层次领域，消息服务还发挥着数据通道、事件驱动、集成与被集成等重要作用。 另外云原生倡导面向性能设计，基于消息队列的异步调用能够显著降低前端业务的响应时间，提高吞吐量；基于消息队列还能实现削峰填谷，把慢服务分离到后置链路，提升整个业务链路的性能。 云原生消息服务演进方向 云原生时代对云服务有着更高的要求，传统的消息服务在云原生这个大背景下如何持续进化为云原生的消息服务，我们认为方向有这么几个： 低成本 在过去，每家公司自建消息中间件集群，或是自研的、或是开源的，需要投入巨大的研发、运维成本。云原生时代的消息服务借助Serverless等弹性技术，无需预先Book服务器资源，无需容量规划，采取按量付费这种更经济的模式将大幅度降低成本。 易用性 在云原生时代，消息服务第一步将进化成为一种所见即所得、开箱即用的服务，易用性极大的提高。接下来，消息服务将以网格的形式触达更复杂的部署环境，小到IoT设备，大到自建IDC，都能以跟公有云同样易用的方式接入消息服务，且能轻易地满足云边端一体化、跨IDC、跨云等互通需求，真正成为应用层的通信基础设施。 多样性 云原生消息服务将致力于建设大而全的消息生态，来涵盖丰富的业务场景，提供各式各样的解决方案，从而满足不同用户的多样性需求。阿里云消息队列目前建设了多个子产品线来支撑丰富的业务需求，比如消息队列RocketMQ，Kafka，微消息队列等。 标准化 容器镜像这项云原生的核心技术轻易地实现了不可变基础设施，不可变的镜像消除了IaaS层的差异，让云原生应用可以在不同的云厂商之间随意迁移。但实际上，很多云服务提供的接入形式并不是标准的，所以依赖这些非标准化云服务的应用形成了事实上的厂商锁定，这些应用在运行时是无法完成真正的按需迁移，所以只能称为某朵云上的原生应用，无法称为真正的云原生应用。因此，消息服务需要做到标准化，消除用户关于厂商锁定的担忧，目前阿里云消息队列采纳了很多社区标准，支持了多种开源的API协议，同时也在打造自己标准化接口。 云原生消息三化 云原生消息Kubernetes化 Kubernetes项目当下绝对是大红大紫，在容器编排和应用托管领域绝对的事实标准，整个社区也是生机盎然。所以，必须将我们的消息服务升级为K8S环境开箱即用的服务。 云原生消息Serverless化 Serverless最核心的理念是“按需”，云原生消息Serverless化主要是从两个维度落地按需的概念。一方面根据业务规模自动化扩缩容实例规格、队列数等逻辑资源；另一方面，根据服务端负载自动化扩缩容计算、存储等物理资源。 云原生消息Mesh化 云原生消息Mesh化将消息富客户端能力下沉至Sidecar，将详细的服务发现、复杂均衡、流量监控等职责与业务逻辑隔离，在运行时完成透明组装，同时提供细粒度的消息灰度和治理能力 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/新技术-云原生数据库.html":{"url":"ch3/新技术-云原生数据库.html","title":"云原生数据库","keywords":"","body":"中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/新技术-ServerlessContainer.html":{"url":"ch3/新技术-ServerlessContainer.html","title":"ServerlessContainer","keywords":"","body":"ServerlessContainer 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/service-mesh.html":{"url":"ch3/service-mesh.html","title":"Service Mesh","keywords":"","body":"服务网格 服务网格 （Service Mesh）是一个用于管理、观测、支持工作负载实例之间安全通信的基础设施层。在实践中，Service Mesh 通常以轻量级网络代理阵列的形式实现，这些代理与应用程序代码部署在一起，而对应用程序来说无需感知代理的存在。 目前典型的 Service Mesh 开源项目有 Istio 和 Linkerd，其中 Linkerd 是 CNCF 托管的项目，其背后的公司 Bouyant，该公司也是 Service Mesh 的早期推广者，Istio 则是 Google、IBM、Lyft 共同开源的一个项目，目前正在快速地演进中。 图片 - Service Mesh的控制平面 Service Mesh 通常由两部分组成——控制平面和数据平面。数据平面运行在 Sidecar 中，Sidecar 作为一个独立的容器和业务系统运行在同一个 Kubernetes 的 Pod 里面，或者作为一个独立的进程和应用程序进程运行在同一个虚拟机上，其主要充当业务系统的网络流量的代理。传统 RPC 中的服务发现、限流、熔断、链路追踪等能力都会下沉到 Sidecar 中。Sidecar 为应用程序提供了一个透明的网络基础设施，让业务在低侵入或者零侵入的情况获得更健壮的网络通信能力。 控制平面的特点 控制平面作为服务网格的管控面，具有如下特点： 不直接解析数据包。 与控制平面中的代理通信，下发策略和配置。 负责网络行为的可视化。 通常提供 API 或者命令行工具可用于配置版本化管理，便于持续集成和部署。 数据平面的特点 数据平面作为服务网格的执行层，具有如下特点： 通常是按照无状态目标设计的，但实际上为了提高流量转发性能，需要缓存一些数据，因此无状态也是有争议的。 直接处理入站和出站数据包，转发、路由、健康检查、负载均衡、认证、鉴权、产生监控数据等。 对应用来说透明，即可以做到无感知部署。 服务网格为微服务带来的变革 第一，将服务治理与业务逻辑解耦。服务网格把 SDK 中的大部分能力从应用中剥离出来，拆解为独立进程，以 Sidecar 的模式部署，将服务通信及相关管控功能从业务程序中分离并下沉到基础设施层，使其和业务系统完全解耦，使开发人员更加专注于业务本身。 注意，这里提到了一个词“大部分”，SDK 中往往还需要保留协议编解码的逻辑，甚至在某些场景下还需要一个轻量级的 SDK 来实现细粒度的治理与监控策略。例如，要想实现方法级别的调用链追踪，服务网格则需要业务应用实现 trace ID 的传递，而这部分实现逻辑也可以通过轻量级的 SDK 实现。因此，从代码层面来讲，服务网格并非是零侵入的。 第二，异构系统的统一治理。随着新技术的发展和人员更替，在同一家公司中往往会出现不同语言、不同框架的应用和服务，为了能够统一管控这些服务，以往的做法是为每种语言、每种框架都开发一套完整的 SDK，维护成本非常之高，而且给公司的中间件团队带来了很大的挑战。有了服务网格之后，通过将主体的服务治理能力下沉到基础设施，多语言的支持就轻松很多了。只需要提供一个非常轻量级的 SDK，甚至很多情况下都不需要一个单独的 SDK，就可以方便地实现多语言、多协议的统一流量管控、监控等需求。 服务网格的优势 服务网格相对于传统微服务框架，拥有三大技术优势。 可观察性 因为服务网格是一个专用的基础设施层，所有的服务间通信都要通过它，所以它在技术堆栈中处于独特的位置，以便在服务调用级别上提供统一的遥测指标。这意味着，所有服务都被监控为“黑盒”。服务网格捕获诸如来源、目的地、协议、URL、状态码、延迟、持续时间等线路数据。这本质上等同于 web 服务器日志可以提供的数据，但是服务网格可以为所有服务捕获这些数据，而不仅仅是单个服务的 web 层。需要指出的是，收集数据仅仅是解决微服务应用程序中可观察性问题的一部分。存储与分析这些数据则需要额外能力的机制的补充，然后作用于警报或实例自动伸缩等。 流量控制 通过 Service Mesh，可以为服务提供智能路由（蓝绿部署、金丝雀发布、A/B test）、超时重试、熔断、故障注入、流量镜像等各种控制能力。而以上这些往往是传统微服务框架不具备，但是对系统来说至关重要的功能。例如，服务网格承载了微服务之间的通信流量，因此可以在网格中通过规则进行故障注入，模拟部分微服务出现故障的情况，对整个应用的健壮性进行测试。由于服务网格的设计目的是有效地将来源请求调用连接到其最优目标服务实例，所以这些流量控制特性是“面向目的地的”。这正是服务网格流量控制能力的一大特点。 安全 在某种程度上，单体架构应用受其单地址空间的保护。然而，一旦单体架构应用被分解为多个微服务，网络就会成为一个重要的攻击面。更多的服务意味着更多的网络流量，这对黑客来说意味着更多的机会来攻击信息流。而服务网格恰恰提供了保护网络调用的能力和基础设施。服务网格的安全相关的好处主要体现在以下三个核心领域：服务的认证、服务间通讯的加密、安全相关策略的强制执行。 服务网格的局限性 服务网格带来了巨大变革，拥有其强大的技术优势，被称为第二代“微服务架构”。然而软件开发没有银弹，传统微服务架构有许多痛点，而服务网格也不例外，也有它的局限性。 增加了复杂度 服务网格将 Sidecar 代理和其它组件引入到已经很复杂的分布式环境中，会极大地增加整体链路和操作运维的复杂性。 较高的学习曲线 当前的服务网格几乎都建立在以 Kubernetes 为基础的云原生环境上，服务网格的运维人员需要同时掌握 Kubernetes 和服务网格两种技术，以便在在遇到问题时可以轻松应对。同时因为服务网格引入的新概念，也为开发人员带来了心智负担，需要平台层构建一个友好的用户界面，以降低开发人员的学习曲线。 性能影响 服务网格在服务链路中引入了 Sidecar proxy，因在系统调用中增加了跳转而带来了延迟。虽然该延迟是毫秒级别的，在大多数场景下是可以接受的，但是在某些需要高性能低延迟的的业务场景下，可能是难以容忍的。 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/云原生安全-容器安全.html":{"url":"ch3/云原生安全-容器安全.html","title":"容器安全","keywords":"","body":"云原生安全 “根据Gartner研究预测 ，到2022年，超过75％的全球企业将在生产环境中运行容器化应用。虽然以容器为核心的云原生技术发展速度空前增长，企业采用新兴技术的同时，也需要确保应用在全生命周期的各个关键环节尤其在生产环境运行时的安全问题。“  万物互联时代，企业正在面临着日益严峻的网络安全风险，不断升级的网络攻击、数据泄漏等安全挑战。据国家互联网应急中心2018年度报告 指出，监测到我国互联网恶意程序传播次数日均达500万余次，受攻击的IP地址约5,946万个，约占我国IP总数的17.5%。其中境外控制服务器控制了我国境内约526万台主机。安全漏洞数量共计14,201个，高危漏洞为4,898个。近年来“零日”漏洞 收录数量持续走高，2018年收录的“零日”漏洞收录数量占比37.9%，高达5,381个，同比增长39.6%。大流量分布式拒绝服务攻击（DDoS攻击）事件数量平均每月超过4,000起，超过60%的攻击事件为僵尸网络控制发起。另外，联网工业设备和工业互联网平台、电力、石化等行业远程监控巡检、互联网金融网站和移动APP安全等都存在着可能产生风险包括拒绝服务攻击、远程命令执行、信息泄漏、暴力破解、网络恶意嗅探等安全漏洞。  企业需要满足数字化转型的期望，实现快速交付和扩大数字业务增长的成功需求。企业扩展数字化业务时，需要不断投资并引入容器、微服务架构等云原生技术，构建崭新的数字平台，并制定相应的数字发展战略，帮助企业加速数字化创新，以保持竞争中的领先地位。  云原生应用作为数字业务应用的最佳载体，伴随着企业数字化转型，被越来越多的企业用户所接受。企业基于云原生技术构建自己的智能混合云数字平台，保持企业在数字经济时代的创新竞争力。容器技术具有行业标准、灵活与轻量的特性，支持微服务架构，提高开发运维效率，实现数字业务应用的快速迭代，并能够在异构的云基础设施之间轻松迁移。Gartner最终用户调查研究显示，中国用户对容器技术的热情高于世界其它市场 。汽车、金融、制造、媒体、零售等很多企业都已经将容器运行在了生产环境。 云原生环境面临安全挑战 传统安全策略和工具在云原生环境下存在盲点 传统安全策略与工具未能跟上云原生技术的快速发展，为运行在云原生环境下的业务应用与数据增加了巨大的潜在安全风险。  对于云原生环境的动态特征，包括大幅增加的内部网络流量、服务通信端口总量和容器秒级启动或消失的动态变化，增加了安全监控和保护的难度。传统防火墙很难适应这种持续的动态变化，难以洞察到容器之间的网络流量和异常行为，特别是恶意攻击者在容器间的操作。云原生环境需要对容器和主机有深度监控和可视化的容器网络安全防护，对网络攻击自动抓取网络数据包，用于安全审计；也需要安全工具通过自主学习，自动生成网络安全策略等。 动态复杂的云原生网络环境  创新业务应用的快速交付迭代与扩展帮助数字业务的快速创新与增长。在规划与交付应用时，会拆分成多个相对独立的微服务应用，每个服务应用都有各自的通信端口、访问权限、授权机制等安全点，不仅会受到外部网络的攻击，也可能会受到内部网络发起的攻击。与保护单一应用安全相比，保障微服务应用与其内部网络变得具有挑战。 数字业务应用快速交付需要自动化安全  为提高数字业务应用交付与运维效率，企业应用开发与运维部门引入开发运营一体化流程，比如，每个微服务应用会涉及相对独立的开发、测试和部署的全生命周期，并通过持续集成/持续交付的流水线，将应用部署运行在开发测试和生产环境中。在整个业务应用全生命周期中，需要为各个环节引入自动化安全保护，不仅避免各个环节的潜在风险，而且提高应用安全交付效率。 如何实现云原生安全  数字经济时代下，企业运用云原生技术加速数字业务创新与增长的同时，应引入云原生安全策略和工具，作为企业安全规划建设的重点；从关注容器隔离能力转变为容器现在所属的云原生生态系统，来完善企业安全体系。 Gartner: 从图像分析到网络细分，选项日趋成熟 -Joerg Fritsch，Michael Isbitski 云原生容器网络安全与第7层应用安全保护  在企业传统安全策略和工具的基础上，引入云原生安全，完善企业安全领域和体系。云原生安全工具能够保护时刻动态变化和复杂的云原生环境。  云原生环境下的攻击面不再是单服务器IP地址，而是分布在大量容器之上，而且微服务应用之间存在大量东西向的内部网络流量。传统网络防火墙不仅难以看到容器之间的网络流量，而且随着容器的快速启动和消失，也无法适应这种快速变化。正如一位网络安全架构师所说:“在一个容器的世界里，你无法手动配置 IPtables 或手动更新防火墙规则。”  对于保护单体应用相比，云原生安全工具能够保护和隔离应用容器和服务。即使在容器动态扩展的情况下也会自动实现发现、跟随和保护。还可以像传统的网关防火墙一样保护从外部网络以及传统应用到容器环境之间的网络通信。  云原生安全工具需要有深度可视化和管理容器网络的能力，能够对容器进行细粒度的安全管控和隔离，具有捕捉容器之间的网络数据包的能力，达到第7层即应用层的容器网络安全保护。 数字应用全生命周期与全流程自动化安全  企业在提高应用开发运维效率的同时，也对应用全生命周期和全流程自动化安全保护提出了新的要求。企业通过在持续集成与持续交付关键步骤中集成安全控制来全面地保护云原生应用。一方面，开发运维人员通过安全自动化工具保证应用在开发测试过程中，消除潜在的安全漏洞风险；另一方面，在运行环境中，运维人员通过安全工具自动化保障容器应用和容器网络运行时安全，以及主机的安全加固、检测和防护。在整个开发运营一体化敏捷开发运维过程中，无缝集成安全策略与工具保障整个流水线的自动化安全，实施DevSecOps的理念。 数字应用全生命周期与全流程自动化安全 金融行业客户实践  如今迈入银行4.0时代，伴随着社交媒体创新以及新兴信息技术的不断发展，银行服务向数字化、场景化与产业化方向转型。近年来，某城市商业银行积极布局金融科技创新，一方面通过数字化渠道「手机银行」拓展新市场领域；另一方面通过线下网点的技术升级，通过「智慧银行」 网点，实现高效率、低成本和优质的客户体验。  该银行客户引入云原生技术进行新架构改造，把服务迁移到基于容器的微服务治理平台上，实现应用服务弹性伸缩，极大提升业务系统应对互联网瞬时洪峰流量访问能力，有效保障业务连续稳定，提升金融服务运营质量；同时引入开发运营一体化平台实现快速交付与迭代业务应用能力。  同时，客户所面临的全新挑战是容器运行时网络可视化和安全保护，及持续集成/持续交付流水线自动化安全。通过云原生安全平台解决方案，帮助客户最终完成生产环境上线。  云原生安全平台提供容器环境所必须的网络自动学习检测、可视化和安全性，并可以轻松集成到自动化工作流程中，内置智能识别保护功能可以让业务服务快速安全扩展。通过平台提供第7层容器网络防火墙能力，保障微服务应用服务内外部网络安全与容器运行时安全。  平台提供安全漏洞扫描能力，持续集成/持续交付流水线集成能力，不仅对运行主机和容器进行实时和自动漏洞扫描，也可对镜像和镜像仓库进行自动扫描，确保应用部署到生产环境之前就可以得到安全检测，有效提高开发运营一体化的自动化安全能力，保障容器应用全生命周期安全。  对于银行安全合规要求，平台提供包括告警、事件、日志等功能，可通过Syslog和Webhook对接客户现有安全信息与管理系统，同时提供合规检查、基准测试报告等能力。  客户在传统安全策略和工具之上，引入云原生安全策略与工具，加强对数字业务应用服务及其网络的监控和保护，有效保护内外部攻击者对系统和服务的攻击和入侵，进而提高金融服务的安全级别与保护能力。 结论  随着云环境和云原生技术的不断发展，恶意攻击者们总会找到与新系统和新架构相应的或更先进的攻击破坏方法，不断开发新的恶意工具或病毒或利用零日漏洞实施网络攻击。企业现有的传统安全策略和攻击会存在盲点，无法完全覆盖云原生环境下的安全问题。  运用和实施云原生安全策略与工具，可以有效降低企业在数字化转型过程中引入新兴技术的风险，与传统安全策略与工具相互结合，共同完善和保障企业的应用、网络以及数据安全。  数字经济发展需要网络安全保驾护航。在国家深入发展互联网+、大数据、人工智能，壮大数字经济的政策指导下，企业已经认识到传统安全策略与工具不能满足快速发展变化的云原生安全需求，必须引入云原生安全解决方案。企业在建设数字业务应用系统的同时，已将云原生安全确定为企业安全规划建设的重点。 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/云原生安全-服务网格.html":{"url":"ch3/云原生安全-服务网格.html","title":"基于服务网格的安全","keywords":"","body":"基于服务网格的安全 在微服务的体系架构下，开发人员基于不同的服务框架和开发语言实现自身服务。如何保证整个服务网格的系统安全，以Istio为代表的服务网格产品提出了如下的安全目标： 默认安全： 应用程序代码和基础结构无需更改 深度防御： 与现有安全系统集成，提供多层防御 零信任网络： 在不受信任的网络上构建安全解决方案 为此服务网格需要在下列方向上提供相应的安全措施以保证网格内微服务的安全性： 认证：基于统一规范的认证身份，确保服务之间的所有网络流量都是经过安全认证的，在服务应用程序和网关侧提供如JWT，TLS双向认证等多种认证形式。支持可配置的认证策略。 鉴权：支持服务与服务间和最终用户到服务间的强制授权检验已确保网格中服务的使用者遵循了权限最小化原则。提供网格维度，命名空间维度和应用负载维度上的基于自定义策略的细粒度授权配置。 零信任网络：遵循零信任原则，通过mTLS，RBAC和自动证书轮转等必要安全措施构建一个零信任网络。 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch3/云原生安全-可信计算.html":{"url":"ch3/云原生安全-可信计算.html","title":"可信计算","keywords":"","body":"可信计算 可信计算（Confidential computing）的目标是保护数据使用中（In-Use）的安全性和机密性。目前数据的加密和保护技术主要是针对静态存储数据和网络传输数据，这些技术比较成熟；然而如何加密使用(In-Use)中的数据是整个机密数据保护周期中最具挑战的一步。可信计算把加密的数据和代码放在一个特殊的执行上下文环境(TEE, Trusted Execution Environment)中，而不会暴露给系统其他部分，任何其他应用、BIOS、OS Kernel、管理员、运维人员、云厂商、甚至除了CPU以外的其他硬件均无法访问，极大减少敏感数据的泄露，为用户提供了更好的控制、透明度和隐秘性。 可信计算核心功能包括： 保护并验证云端代码和数据的完整性； 避免敏代码和数据在使用过程中不被恶意窥探和窃取； 保证用户对数据全生命周期的控制； 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch4/研发运营一体化需求.html":{"url":"ch4/研发运营一体化需求.html","title":"研发运营一体化需求","keywords":"","body":"研发运营一体化需求分析 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch4/极致弹性需求.html":{"url":"ch4/极致弹性需求.html","title":"极致弹性需求","keywords":"","body":"极致弹性需求 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch4/Iot等云边端多方协同需求.html":{"url":"ch4/Iot等云边端多方协同需求.html","title":"Iot等云边端多方协同需求","keywords":"","body":"Iot等云边端多方协同需求 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch5/趋势一.html":{"url":"ch5/趋势一.html","title":"趋势一：（500字）","keywords":"","body":"趋势一 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch5/趋势二.html":{"url":"ch5/趋势二.html","title":"趋势二：（500字）","keywords":"","body":"趋势二 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch5/趋势三.html":{"url":"ch5/趋势三.html","title":"趋势三：（500字）","keywords":"","body":"趋势三 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"ch5/趋势四.html":{"url":"ch5/趋势四.html","title":"趋势四：（500字）","keywords":"","body":"趋势四 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "},"appx1/案例分析.html":{"url":"appx1/案例分析.html","title":"附录1：案例分析","keywords":"","body":"案例分析 中国信息通信研究院（CAICT） all right reserved，powered by Gitbook Updated at 2020-07-05 08:02:34 "}}